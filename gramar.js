module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "FileContent": parse_FileContent,
        "Block": parse_Block,
        "Record": parse_Record,
        "MasterCardPrefix": parse_MasterCardPrefix,
        "VisaPrefix": parse_VisaPrefix,
        "DetailRecord": parse_DetailRecord,
        "QualificationRecord": parse_QualificationRecord,
        "QualificationDetails": parse_QualificationDetails,
        "AC": parse_AC,
        "BIN": parse_BIN,
        "AR": parse_AR,
        "Member": parse_Member,
        "PR": parse_PR,
        "RE": parse_RE,
        "McCategoryCode": parse_McCategoryCode,
        "ViCategoryCode": parse_ViCategoryCode,
        "SchemeType": parse_SchemeType,
        "SchemeDescription": parse_SchemeDescription,
        "DataAttribute40": parse_DataAttribute40,
        "ReimbursementAttribute": parse_ReimbursementAttribute,
        "InterchangeRateDesignator": parse_InterchangeRateDesignator,
        "Desc": parse_Desc,
        "DayIndicator": parse_DayIndicator,
        "FlatFee": parse_FlatFee,
        "FlatFeeCurrency": parse_FlatFeeCurrency,
        "FPIIndicator": parse_FPIIndicator,
        "MccRange": parse_MccRange,
        "FileType": parse_FileType,
        "CharOrSpace": parse_CharOrSpace,
        "Numeric7": parse_Numeric7,
        "Numeric6": parse_Numeric6,
        "Numeric4": parse_Numeric4,
        "Numeric3": parse_Numeric3,
        "Numeric2": parse_Numeric2,
        "Char4": parse_Char4,
        "Char2": parse_Char2,
        "CapsChar": parse_CapsChar,
        "AnyChar": parse_AnyChar,
        "AnyNoSpace": parse_AnyNoSpace,
        "Comment": parse_Comment,
        "LineTerminator": parse_LineTerminator,
        "LineTerminatorSequence": parse_LineTerminatorSequence,
        "SourceCharacter": parse_SourceCharacter,
        "Currency": parse_Currency,
        "EndOfLine": parse_EndOfLine,
        "Characters": parse_Characters,
        "space": parse_space
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_FileContent();
        if (result0 !== null) {
          result0 = (function(offset, content) {
            return content;
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_FileContent() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_Block();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_Block();
        }
        if (result0 !== null) {
          result0 = (function(offset, block) {
            return block;
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Block() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_DetailRecord();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_QualificationRecord();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_QualificationRecord();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, detail, qualification) {
            if(qualification) {
                detail.qualification = qualification;
            }
            return detail;
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Record() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MasterCardPrefix();
        if (result0 !== null) {
          result1 = parse_SchemeType();
          if (result1 !== null) {
            result2 = parse_Numeric4();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, prefix, scheme, seq) {
              prefix.scheme = scheme;
              prefix.sequence = seq;
              return prefix;
          })(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_VisaPrefix();
          if (result0 !== null) {
            result1 = parse_SchemeType();
            if (result1 !== null) {
              result2 = parse_Numeric4();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, prefix, scheme, seq) {
                  prefix.scheme = scheme;
                  prefix.sequence = seq;
                  return prefix;
            })(pos0, result0[0], result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_MasterCardPrefix() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "MC") {
          result0 = "MC";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"MC\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_McCategoryCode();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, scheme, categoryCode) {
            return {scheme: 'MasterCard', categoryCode: categoryCode }
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_VisaPrefix() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "VI") {
          result0 = "VI";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"VI\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_ViCategoryCode();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, scheme, categoryCode) {
            return {scheme: 'Visa', categoryCode: categoryCode }
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DetailRecord() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Record();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "DT") {
            result1 = "DT";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"DT\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_Numeric2();
            if (result2 !== null) {
              result3 = parse_Numeric3();
              if (result3 !== null) {
                result4 = parse_Numeric3();
                if (result4 !== null) {
                  result5 = parse_DataAttribute40();
                  if (result5 !== null) {
                    result6 = parse_ReimbursementAttribute();
                    if (result6 !== null) {
                      result7 = parse_InterchangeRateDesignator();
                      if (result7 !== null) {
                        result8 = parse_Numeric4();
                        if (result8 !== null) {
                          result9 = parse_FlatFee();
                          if (result9 !== null) {
                            result10 = parse_FlatFeeCurrency();
                            if (result10 !== null) {
                              result11 = parse_Numeric4();
                              if (result11 !== null) {
                                result12 = parse_CharOrSpace();
                                if (result12 !== null) {
                                  result13 = parse_CharOrSpace();
                                  if (result13 !== null) {
                                    result14 = parse_CharOrSpace();
                                    if (result14 !== null) {
                                      result15 = parse_FPIIndicator();
                                      if (result15 !== null) {
                                        result16 = parse_Numeric6();
                                        if (result16 !== null) {
                                          result17 = [];
                                          if (input.charCodeAt(pos) === 32) {
                                            result18 = " ";
                                            pos++;
                                          } else {
                                            result18 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\" \"");
                                            }
                                          }
                                          while (result18 !== null) {
                                            result17.push(result18);
                                            if (input.charCodeAt(pos) === 32) {
                                              result18 = " ";
                                              pos++;
                                            } else {
                                              result18 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\" \"");
                                              }
                                            }
                                          }
                                          if (result17 !== null) {
                                            result18 = [];
                                            if (input.charCodeAt(pos) === 9) {
                                              result19 = "\t";
                                              pos++;
                                            } else {
                                              result19 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"\\t\"");
                                              }
                                            }
                                            while (result19 !== null) {
                                              result18.push(result19);
                                              if (input.charCodeAt(pos) === 9) {
                                                result19 = "\t";
                                                pos++;
                                              } else {
                                                result19 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"\\t\"");
                                                }
                                              }
                                            }
                                            if (result18 !== null) {
                                              result19 = parse_LineTerminatorSequence();
                                              result19 = result19 !== null ? result19 : "";
                                              if (result19 !== null) {
                                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19];
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, record, subSequence, itemId, schemeId, description, reimbursement, rateDesignator, feePercentage, flatFee, feeCurrency, minFee, intIndicator, psi, eci, fpi, maxFee) {
            var value;
            record.subSequence = subSequence;
            record.description = description;
            record.itemId = itemId;
            record.schemeId = schemeId;
            if(reimbursement) {
                record.reimbursementAttribute = reimbursement;
            }
            value = processor.valuePresent(rateDesignator);
            if(value) {
                record.interchangeRateDesignator = value;
            }
            record.feePercentage = feePercentage;
            record.flatFee = flatFee;
            record.minFee = minFee;
            record.maxFee = maxFee;
            value = processor.valuePresent(intIndicator);
            if(value) {
                record.intIndicator = value;
            }
            value = processor.valuePresent(psi);
            if(value) {
                record.paymentServiceIndicator = value;
            }
            value = processor.valuePresent(eci);
            if(value) {
                record.eciIndicator = value;
            }
            value = processor.valuePresent(fpi);
            if(value) {
                record.fpiIndicator = value;
            }
            value = processor.valuePresent(feeCurrency);
            if(value) {
              record.flatFee.currency = value;
            }
            return record;
          })(pos0, result0[0], result0[2], result0[3], result0[4], result0[5], result0[6], result0[7], result0[8], result0[9], result0[10], result0[11], result0[12], result0[13], result0[14], result0[15], result0[16]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_QualificationRecord() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Record();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "QU") {
            result1 = "QU";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"QU\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_Numeric2();
            if (result2 !== null) {
              result3 = parse_QualificationDetails();
              if (result3 !== null) {
                result4 = [];
                if (input.charCodeAt(pos) === 32) {
                  result5 = " ";
                  pos++;
                } else {
                  result5 = null;
                  if (reportFailures === 0) {
                    matchFailed("\" \"");
                  }
                }
                while (result5 !== null) {
                  result4.push(result5);
                  if (input.charCodeAt(pos) === 32) {
                    result5 = " ";
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\" \"");
                    }
                  }
                }
                if (result4 !== null) {
                  result5 = parse_LineTerminatorSequence();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, record, subSequence, qualification) {
            var result = {};
            result.subSequence = subSequence;
            if(qualification) {
                result.qualification = qualification;
            }
            return result;
          })(pos0, result0[0], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_QualificationDetails() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "AC") {
          result0 = "AC";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"AC\"");
          }
        }
        if (result0 !== null) {
          if (/^[YN]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[YN]");
            }
          }
          if (result1 !== null) {
            result3 = parse_AC();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_AC();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, qType, operator, authChars) {
            return processor.handleCollection({code: qType, op: operator, data: authChars});
          })(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.substr(pos, 2) === "AI") {
            result0 = "AI";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"AI\"");
            }
          }
          if (result0 !== null) {
            if (/^[YN]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[YN]");
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, qType, operator) {
              //this is MCC field
              return processor.handleBoolean({op:operator, code: qType});
            })(pos0, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 2) === "AB") {
              result0 = "AB";
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"AB\"");
              }
            }
            if (result0 !== null) {
              if (/^[YN]/.test(input.charAt(pos))) {
                result1 = input.charAt(pos);
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("[YN]");
                }
              }
              if (result1 !== null) {
                result3 = parse_BIN();
                if (result3 !== null) {
                  result2 = [];
                  while (result3 !== null) {
                    result2.push(result3);
                    result3 = parse_BIN();
                  }
                } else {
                  result2 = null;
                }
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, qType, operator, binList) {
                return processor.handleCollection({code: qType, op:operator, data: binList});
              })(pos0, result0[0], result0[1], result0[2]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.substr(pos, 2) === "AR") {
                result0 = "AR";
                pos += 2;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"AR\"");
                }
              }
              if (result0 !== null) {
                if (/^[YN]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[YN]");
                  }
                }
                if (result1 !== null) {
                  result3 = parse_AR();
                  if (result3 !== null) {
                    result2 = [];
                    while (result3 !== null) {
                      result2.push(result3);
                      result3 = parse_AR();
                    }
                  } else {
                    result2 = null;
                  }
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, qType, operator, respCodes) {
                  return processor.handleCollection({code: qType, op: operator, data: respCodes});
                })(pos0, result0[0], result0[1], result0[2]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                if (input.substr(pos, 2) === "AU") {
                  result0 = "AU";
                  pos += 2;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"AU\"");
                  }
                }
                if (result0 !== null) {
                  if (/^[YN]/.test(input.charAt(pos))) {
                    result1 = input.charAt(pos);
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("[YN]");
                    }
                  }
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, qType, operator) {
                    return processor.handleBoolean({op: operator, code: qType});
                  })(pos0, result0[0], result0[1]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  if (input.substr(pos, 2) === "AV") {
                    result0 = "AV";
                    pos += 2;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"AV\"");
                    }
                  }
                  if (result0 !== null) {
                    if (/^[YN]/.test(input.charAt(pos))) {
                      result1 = input.charAt(pos);
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("[YN]");
                      }
                    }
                    if (result1 !== null) {
                      result3 = parse_AnyChar();
                      if (result3 !== null) {
                        result2 = [];
                        while (result3 !== null) {
                          result2.push(result3);
                          result3 = parse_AnyChar();
                        }
                      } else {
                        result2 = null;
                      }
                      if (result2 !== null) {
                        result0 = [result0, result1, result2];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, qType, operator, data) {
                      return processor.handleCollection({code: qType, op: operator, data: data});
                    })(pos0, result0[0], result0[1], result0[2]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                  if (result0 === null) {
                    pos0 = pos;
                    pos1 = pos;
                    if (input.substr(pos, 2) === "BS") {
                      result0 = "BS";
                      pos += 2;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"BS\"");
                      }
                    }
                    if (result0 !== null) {
                      if (/^[YN]/.test(input.charAt(pos))) {
                        result1 = input.charAt(pos);
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed("[YN]");
                        }
                      }
                      if (result1 !== null) {
                        result3 = parse_Numeric7();
                        if (result3 !== null) {
                          result2 = [];
                          while (result3 !== null) {
                            result2.push(result3);
                            result3 = parse_Numeric7();
                          }
                        } else {
                          result2 = null;
                        }
                        if (result2 !== null) {
                          result0 = [result0, result1, result2];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, qType, operator, bsaCol) {
                        return processor.handleCollection({code: qType, op: operator, data: bsaCol});
                      })(pos0, result0[0], result0[1], result0[2]);
                    }
                    if (result0 === null) {
                      pos = pos0;
                    }
                    if (result0 === null) {
                      pos0 = pos;
                      pos1 = pos;
                      if (input.substr(pos, 2) === "BT") {
                        result0 = "BT";
                        pos += 2;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"BT\"");
                        }
                      }
                      if (result0 !== null) {
                        if (/^[YN]/.test(input.charAt(pos))) {
                          result1 = input.charAt(pos);
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed("[YN]");
                          }
                        }
                        if (result1 !== null) {
                          result3 = parse_Numeric7();
                          if (result3 !== null) {
                            result2 = [];
                            while (result3 !== null) {
                              result2.push(result3);
                              result3 = parse_Numeric7();
                            }
                          } else {
                            result2 = null;
                          }
                          if (result2 !== null) {
                            result0 = [result0, result1, result2];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, qType, operator, bstCol) {
                          return processor.handleCollection({code: qType, op: operator, data: bstCol});
                        })(pos0, result0[0], result0[1], result0[2]);
                      }
                      if (result0 === null) {
                        pos = pos0;
                      }
                      if (result0 === null) {
                        pos0 = pos;
                        pos1 = pos;
                        if (input.substr(pos, 2) === "CA") {
                          result0 = "CA";
                          pos += 2;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"CA\"");
                          }
                        }
                        if (result0 !== null) {
                          if (/^[YN1-4]/.test(input.charAt(pos))) {
                            result1 = input.charAt(pos);
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed("[YN1-4]");
                            }
                          }
                          if (result1 !== null) {
                            result0 = [result0, result1];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                        if (result0 !== null) {
                          result0 = (function(offset, qType, operator) {
                            var desc;
                            if(operator === "Y") {
                                desc = "numeric and > 0"
                            } else if(operator === "N"){
                                desc = "0"
                            } else {
                                desc = operator;
                            }
                            return {fieldCode: qType, data: desc, op:"", sentence : "CAT code" + desc};
                          })(pos0, result0[0], result0[1]);
                        }
                        if (result0 === null) {
                          pos = pos0;
                        }
                        if (result0 === null) {
                          pos0 = pos;
                          pos1 = pos;
                          if (input.substr(pos, 2) === "CC") {
                            result0 = "CC";
                            pos += 2;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"CC\"");
                            }
                          }
                          if (result0 !== null) {
                            if (/^[YN]/.test(input.charAt(pos))) {
                              result1 = input.charAt(pos);
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed("[YN]");
                              }
                            }
                            if (result1 !== null) {
                              result2 = parse_Member();
                              if (result2 !== null) {
                                result3 = parse_Member();
                                if (result3 !== null) {
                                  result4 = [];
                                  result5 = parse_Member();
                                  while (result5 !== null) {
                                    result4.push(result5);
                                    result5 = parse_Member();
                                  }
                                  if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                          if (result0 !== null) {
                            result0 = (function(offset, qType, operator, m1, m2, m3) {
                              var data = [m1, m2];
                              if(m3 !== undefined && m3 !== null && m3.length > 0) {
                                  data.push(m3[0]);
                              }
                              return processor.handleFunction({code: qType, op: (operator === 'Y')?"":"not", data: data});
                            })(pos0, result0[0], result0[1], result0[2], result0[3], result0[4]);
                          }
                          if (result0 === null) {
                            pos = pos0;
                          }
                          if (result0 === null) {
                            pos0 = pos;
                            pos1 = pos;
                            if (input.substr(pos, 2) === "CP") {
                              result0 = "CP";
                              pos += 2;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"CP\"");
                              }
                            }
                            if (result0 !== null) {
                              if (/^[YN]/.test(input.charAt(pos))) {
                                result1 = input.charAt(pos);
                                pos++;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed("[YN]");
                                }
                              }
                              if (result1 !== null) {
                                result3 = parse_Char2();
                                if (result3 !== null) {
                                  result2 = [];
                                  while (result3 !== null) {
                                    result2.push(result3);
                                    result3 = parse_Char2();
                                  }
                                } else {
                                  result2 = null;
                                }
                                if (result2 !== null) {
                                  result0 = [result0, result1, result2];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                            if (result0 !== null) {
                              result0 = (function(offset, qType, operator, values) {
                                return processor.handleCollection({code: qType, op: operator, data: values});
                              })(pos0, result0[0], result0[1], result0[2]);
                            }
                            if (result0 === null) {
                              pos = pos0;
                            }
                            if (result0 === null) {
                              pos0 = pos;
                              pos1 = pos;
                              if (input.substr(pos, 2) === "CQ") {
                                result0 = "CQ";
                                pos += 2;
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"CQ\"");
                                }
                              }
                              if (result0 !== null) {
                                if (/^[YN]/.test(input.charAt(pos))) {
                                  result1 = input.charAt(pos);
                                  pos++;
                                } else {
                                  result1 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("[YN]");
                                  }
                                }
                                if (result1 !== null) {
                                  result0 = [result0, result1];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                              if (result0 !== null) {
                                result0 = (function(offset, qType, operator) {
                                  return processor.handleBoolean({code: qType, op: operator});
                                })(pos0, result0[0], result0[1]);
                              }
                              if (result0 === null) {
                                pos = pos0;
                              }
                              if (result0 === null) {
                                pos0 = pos;
                                pos1 = pos;
                                if (input.substr(pos, 2) === "CR") {
                                  result0 = "CR";
                                  pos += 2;
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"CR\"");
                                  }
                                }
                                if (result0 !== null) {
                                  if (/^[YN]/.test(input.charAt(pos))) {
                                    result1 = input.charAt(pos);
                                    pos++;
                                  } else {
                                    result1 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("[YN]");
                                    }
                                  }
                                  if (result1 !== null) {
                                    result0 = [result0, result1];
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                                if (result0 !== null) {
                                  result0 = (function(offset, qType, operator) {
                                    //checks the MCC
                                    return processor.handleBoolean({code: qType, op: operator});
                                  })(pos0, result0[0], result0[1]);
                                }
                                if (result0 === null) {
                                  pos = pos0;
                                }
                                if (result0 === null) {
                                  pos0 = pos;
                                  pos1 = pos;
                                  if (input.substr(pos, 2) === "CS") {
                                    result0 = "CS";
                                    pos += 2;
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"CS\"");
                                    }
                                  }
                                  if (result0 !== null) {
                                    if (/^[YN]/.test(input.charAt(pos))) {
                                      result1 = input.charAt(pos);
                                      pos++;
                                    } else {
                                      result1 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("[YN]");
                                      }
                                    }
                                    if (result1 !== null) {
                                      result3 = parse_Char2();
                                      if (result3 !== null) {
                                        result2 = [];
                                        while (result3 !== null) {
                                          result2.push(result3);
                                          result3 = parse_Char2();
                                        }
                                      } else {
                                        result2 = null;
                                      }
                                      if (result2 !== null) {
                                        result0 = [result0, result1, result2];
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                  if (result0 !== null) {
                                    result0 = (function(offset, qType, operator, values) {
                                      return processor.handleCollection({code: qType, op: operator, data: values});
                                    })(pos0, result0[0], result0[1], result0[2]);
                                  }
                                  if (result0 === null) {
                                    pos = pos0;
                                  }
                                  if (result0 === null) {
                                    pos0 = pos;
                                    pos1 = pos;
                                    if (input.substr(pos, 2) === "CT") {
                                      result0 = "CT";
                                      pos += 2;
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"CT\"");
                                      }
                                    }
                                    if (result0 !== null) {
                                      if (/^[YN]/.test(input.charAt(pos))) {
                                        result1 = input.charAt(pos);
                                        pos++;
                                      } else {
                                        result1 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("[YN]");
                                        }
                                      }
                                      if (result1 !== null) {
                                        result2 = parse_Currency();
                                        if (result2 !== null) {
                                          result3 = parse_Member();
                                          if (result3 !== null) {
                                            result4 = [];
                                            result5 = parse_Member();
                                            while (result5 !== null) {
                                              result4.push(result5);
                                              result5 = parse_Member();
                                            }
                                            if (result4 !== null) {
                                              result0 = [result0, result1, result2, result3, result4];
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                    if (result0 !== null) {
                                      result0 = (function(offset, qType, operator, country, m1, theRest) {
                                        var rest = "";
                                        theRest.forEach(function(memberCode) {
                                            rest += (", " +memberCode);
                                        });
                                        var desc = processor.MemberMap[m1] + rest + ((rest.length ===0)?" is":" are ") + ((operator === 'Y')?"":" not ") +" located in " +country;
                                        return {fieldCode: qType, sentence: desc}
                                      })(pos0, result0[0], result0[1], result0[2], result0[3], result0[4]);
                                    }
                                    if (result0 === null) {
                                      pos = pos0;
                                    }
                                    if (result0 === null) {
                                      pos0 = pos;
                                      pos1 = pos;
                                      if (input.substr(pos, 2) === "CV") {
                                        result0 = "CV";
                                        pos += 2;
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"CV\"");
                                        }
                                      }
                                      if (result0 !== null) {
                                        if (/^[YN]/.test(input.charAt(pos))) {
                                          result1 = input.charAt(pos);
                                          pos++;
                                        } else {
                                          result1 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("[YN]");
                                          }
                                        }
                                        if (result1 !== null) {
                                          result3 = parse_CapsChar();
                                          if (result3 !== null) {
                                            result2 = [];
                                            while (result3 !== null) {
                                              result2.push(result3);
                                              result3 = parse_CapsChar();
                                            }
                                          } else {
                                            result2 = null;
                                          }
                                          if (result2 !== null) {
                                            result0 = [result0, result1, result2];
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                      if (result0 !== null) {
                                        result0 = (function(offset, qType, operator, data) {
                                          return processor.handleCollection({code: qType, op: operator, data: data});
                                        })(pos0, result0[0], result0[1], result0[2]);
                                      }
                                      if (result0 === null) {
                                        pos = pos0;
                                      }
                                      if (result0 === null) {
                                        pos0 = pos;
                                        pos1 = pos;
                                        if (input.substr(pos, 2) === "DA") {
                                          result0 = "DA";
                                          pos += 2;
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"DA\"");
                                          }
                                        }
                                        if (result0 !== null) {
                                          if (/^[YN]/.test(input.charAt(pos))) {
                                            result1 = input.charAt(pos);
                                            pos++;
                                          } else {
                                            result1 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("[YN]");
                                            }
                                          }
                                          if (result1 !== null) {
                                            result2 = parse_FileType();
                                            if (result2 !== null) {
                                              result3 = parse_Numeric3();
                                              if (result3 !== null) {
                                                result4 = parse_Numeric2();
                                                if (result4 !== null) {
                                                  result5 = parse_DataAttribute40();
                                                  if (result5 !== null) {
                                                    result6 = [];
                                                    result7 = parse_AnyChar();
                                                    while (result7 !== null) {
                                                      result6.push(result7);
                                                      result7 = parse_AnyChar();
                                                    }
                                                    if (result6 !== null) {
                                                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                        if (result0 !== null) {
                                          result0 = (function(offset, qType, operator, fileType, position, length, value, comment) {
                                            var fieldName = comment.join("").trim();
                                            console.log(fieldName);
                                            return {fieldCode: fieldName, fileType: fileType, position: position, length: length,
                                            fieldName: fieldName, sentence: ""};
                                          })(pos0, result0[0], result0[1], result0[2], result0[3], result0[4], result0[5], result0[6]);
                                        }
                                        if (result0 === null) {
                                          pos = pos0;
                                        }
                                        if (result0 === null) {
                                          pos0 = pos;
                                          pos1 = pos;
                                          if (input.substr(pos, 2) === "DB") {
                                            result0 = "DB";
                                            pos += 2;
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"DB\"");
                                            }
                                          }
                                          if (result0 !== null) {
                                            if (/^[YN]/.test(input.charAt(pos))) {
                                              result1 = input.charAt(pos);
                                              pos++;
                                            } else {
                                              result1 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("[YN]");
                                              }
                                            }
                                            if (result1 !== null) {
                                              result0 = [result0, result1];
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                          if (result0 !== null) {
                                            result0 = (function(offset, qType, operator) {
                                              return processor.handleBoolean({code: qType, op: operator});
                                            })(pos0, result0[0], result0[1]);
                                          }
                                          if (result0 === null) {
                                            pos = pos0;
                                          }
                                          if (result0 === null) {
                                            pos0 = pos;
                                            pos1 = pos;
                                            if (input.substr(pos, 2) === "DC") {
                                              result0 = "DC";
                                              pos += 2;
                                            } else {
                                              result0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"DC\"");
                                              }
                                            }
                                            if (result0 !== null) {
                                              if (/^[YN]/.test(input.charAt(pos))) {
                                                result1 = input.charAt(pos);
                                                pos++;
                                              } else {
                                                result1 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("[YN]");
                                                }
                                              }
                                              if (result1 !== null) {
                                                result0 = [result0, result1];
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                            if (result0 !== null) {
                                              result0 = (function(offset, qType, operator) {
                                                return processor.handleBoolean({code: qType, op:operator});
                                              })(pos0, result0[0], result0[1]);
                                            }
                                            if (result0 === null) {
                                              pos = pos0;
                                            }
                                            if (result0 === null) {
                                              pos0 = pos;
                                              pos1 = pos;
                                              if (input.substr(pos, 2) === "PR") {
                                                result0 = "PR";
                                                pos += 2;
                                              } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"PR\"");
                                                }
                                              }
                                              if (result0 !== null) {
                                                if (/^[YN]/.test(input.charAt(pos))) {
                                                  result1 = input.charAt(pos);
                                                  pos++;
                                                } else {
                                                  result1 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("[YN]");
                                                  }
                                                }
                                                if (result1 !== null) {
                                                  result3 = parse_PR();
                                                  if (result3 !== null) {
                                                    result2 = [];
                                                    while (result3 !== null) {
                                                      result2.push(result3);
                                                      result3 = parse_PR();
                                                    }
                                                  } else {
                                                    result2 = null;
                                                  }
                                                  if (result2 !== null) {
                                                    result0 = [result0, result1, result2];
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                              if (result0 !== null) {
                                                result0 = (function(offset, qType, operator, productCodes) {
                                                  return processor.handleCollection({code: qType, op: operator, data: productCodes});
                                                })(pos0, result0[0], result0[1], result0[2]);
                                              }
                                              if (result0 === null) {
                                                pos = pos0;
                                              }
                                              if (result0 === null) {
                                                pos0 = pos;
                                                pos1 = pos;
                                                if (input.substr(pos, 2) === "RC") {
                                                  result0 = "RC";
                                                  pos += 2;
                                                } else {
                                                  result0 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"RC\"");
                                                  }
                                                }
                                                if (result0 !== null) {
                                                  if (/^[YN]/.test(input.charAt(pos))) {
                                                    result1 = input.charAt(pos);
                                                    pos++;
                                                  } else {
                                                    result1 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("[YN]");
                                                    }
                                                  }
                                                  if (result1 !== null) {
                                                    result2 = parse_Member();
                                                    if (result2 !== null) {
                                                      result3 = parse_Member();
                                                      if (result3 !== null) {
                                                        result4 = [];
                                                        result5 = parse_Member();
                                                        while (result5 !== null) {
                                                          result4.push(result5);
                                                          result5 = parse_Member();
                                                        }
                                                        if (result4 !== null) {
                                                          result0 = [result0, result1, result2, result3, result4];
                                                        } else {
                                                          result0 = null;
                                                          pos = pos1;
                                                        }
                                                      } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                      }
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                                if (result0 !== null) {
                                                  result0 = (function(offset, qType, operator, m1, m2, m3) {
                                                    var desc = "region code of the " + m1 + " is the sam as " + m2;
                                                        if(m3 !== undefined && m3 !== null && m3.length > 0) {
                                                            desc += " and " + m3;
                                                        }
                                                    return {fieldCode: qType, desc: desc};
                                                  })(pos0, result0[0], result0[1], result0[2], result0[3], result0[4]);
                                                }
                                                if (result0 === null) {
                                                  pos = pos0;
                                                }
                                                if (result0 === null) {
                                                  pos0 = pos;
                                                  pos1 = pos;
                                                  if (input.substr(pos, 2) === "RE") {
                                                    result0 = "RE";
                                                    pos += 2;
                                                  } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"RE\"");
                                                    }
                                                  }
                                                  if (result0 !== null) {
                                                    if (/^[YN]/.test(input.charAt(pos))) {
                                                      result1 = input.charAt(pos);
                                                      pos++;
                                                    } else {
                                                      result1 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("[YN]");
                                                      }
                                                    }
                                                    if (result1 !== null) {
                                                      result2 = parse_Member();
                                                      if (result2 !== null) {
                                                        result4 = parse_RE();
                                                        if (result4 !== null) {
                                                          result3 = [];
                                                          while (result4 !== null) {
                                                            result3.push(result4);
                                                            result4 = parse_RE();
                                                          }
                                                        } else {
                                                          result3 = null;
                                                        }
                                                        if (result3 !== null) {
                                                          result0 = [result0, result1, result2, result3];
                                                        } else {
                                                          result0 = null;
                                                          pos = pos1;
                                                        }
                                                      } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                      }
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                  if (result0 !== null) {
                                                    result0 = (function(offset, qType, operator, m, regions) {
                                                      var op = (operator === 'Y')?"":"not";
                                                      var detailedRegions = [],
                                                          regionCount = regions.length;
                                                  
                                                      for(var i = 0;i<regionCount; i++) {
                                                          var region = regions[i];
                                                          detailedRegions.push(processor.regions[region.scheme][region.value]);
                                                      }
                                                      return processor.handleFunction({code: qType, member:m, op: op, data: detailedRegions});
                                                    })(pos0, result0[0], result0[1], result0[2], result0[3]);
                                                  }
                                                  if (result0 === null) {
                                                    pos = pos0;
                                                  }
                                                  if (result0 === null) {
                                                    pos0 = pos;
                                                    pos1 = pos;
                                                    if (input.substr(pos, 2) === "RP") {
                                                      result0 = "RP";
                                                      pos += 2;
                                                    } else {
                                                      result0 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"RP\"");
                                                      }
                                                    }
                                                    if (result0 !== null) {
                                                      if (/^[YN]/.test(input.charAt(pos))) {
                                                        result1 = input.charAt(pos);
                                                        pos++;
                                                      } else {
                                                        result1 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed("[YN]");
                                                        }
                                                      }
                                                      if (result1 !== null) {
                                                        if (/^[A-Za-z]/.test(input.charAt(pos))) {
                                                          result3 = input.charAt(pos);
                                                          pos++;
                                                        } else {
                                                          result3 = null;
                                                          if (reportFailures === 0) {
                                                            matchFailed("[A-Za-z]");
                                                          }
                                                        }
                                                        if (result3 !== null) {
                                                          result2 = [];
                                                          while (result3 !== null) {
                                                            result2.push(result3);
                                                            if (/^[A-Za-z]/.test(input.charAt(pos))) {
                                                              result3 = input.charAt(pos);
                                                              pos++;
                                                            } else {
                                                              result3 = null;
                                                              if (reportFailures === 0) {
                                                                matchFailed("[A-Za-z]");
                                                              }
                                                            }
                                                          }
                                                        } else {
                                                          result2 = null;
                                                        }
                                                        if (result2 !== null) {
                                                          result0 = [result0, result1, result2];
                                                        } else {
                                                          result0 = null;
                                                          pos = pos1;
                                                        }
                                                      } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                      }
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                    if (result0 !== null) {
                                                      result0 = (function(offset, qType, operator, values) {
                                                        return processor.handleCollection({code: qType, op: operator, data: values});
                                                      })(pos0, result0[0], result0[1], result0[2]);
                                                    }
                                                    if (result0 === null) {
                                                      pos = pos0;
                                                    }
                                                    if (result0 === null) {
                                                      pos0 = pos;
                                                      pos1 = pos;
                                                      if (input.substr(pos, 2) === "RT") {
                                                        result0 = "RT";
                                                        pos += 2;
                                                      } else {
                                                        result0 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed("\"RT\"");
                                                        }
                                                      }
                                                      if (result0 !== null) {
                                                        if (/^[YN]/.test(input.charAt(pos))) {
                                                          result1 = input.charAt(pos);
                                                          pos++;
                                                        } else {
                                                          result1 = null;
                                                          if (reportFailures === 0) {
                                                            matchFailed("[YN]");
                                                          }
                                                        }
                                                        if (result1 !== null) {
                                                          result0 = [result0, result1];
                                                        } else {
                                                          result0 = null;
                                                          pos = pos1;
                                                        }
                                                      } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                      }
                                                      if (result0 !== null) {
                                                        result0 = (function(offset, qType, operator) {
                                                          return processor.handleBoolean({code: qType, op: operator});
                                                        })(pos0, result0[0], result0[1]);
                                                      }
                                                      if (result0 === null) {
                                                        pos = pos0;
                                                      }
                                                      if (result0 === null) {
                                                        pos0 = pos;
                                                        pos1 = pos;
                                                        if (input.substr(pos, 2) === "TK") {
                                                          result0 = "TK";
                                                          pos += 2;
                                                        } else {
                                                          result0 = null;
                                                          if (reportFailures === 0) {
                                                            matchFailed("\"TK\"");
                                                          }
                                                        }
                                                        if (result0 !== null) {
                                                          if (/^[YN]/.test(input.charAt(pos))) {
                                                            result1 = input.charAt(pos);
                                                            pos++;
                                                          } else {
                                                            result1 = null;
                                                            if (reportFailures === 0) {
                                                              matchFailed("[YN]");
                                                            }
                                                          }
                                                          if (result1 !== null) {
                                                            result2 = parse_Numeric6();
                                                            if (result2 !== null) {
                                                              result3 = parse_Currency();
                                                              if (result3 !== null) {
                                                                result0 = [result0, result1, result2, result3];
                                                              } else {
                                                                result0 = null;
                                                                pos = pos1;
                                                              }
                                                            } else {
                                                              result0 = null;
                                                              pos = pos1;
                                                            }
                                                          } else {
                                                            result0 = null;
                                                            pos = pos1;
                                                          }
                                                        } else {
                                                          result0 = null;
                                                          pos = pos1;
                                                        }
                                                        if (result0 !== null) {
                                                          result0 = (function(offset, qType, operator, amount, curr) {
                                                            var op = (operator === 'Y')?"not":"";
                                                            return processor.handleFunction({code: qType, op: op, amount: amount, currency: curr});
                                                          })(pos0, result0[0], result0[1], result0[2], result0[3]);
                                                        }
                                                        if (result0 === null) {
                                                          pos = pos0;
                                                        }
                                                        if (result0 === null) {
                                                          pos0 = pos;
                                                          pos1 = pos;
                                                          if (input.substr(pos, 2) === "DD") {
                                                            result0 = "DD";
                                                            pos += 2;
                                                          } else {
                                                            result0 = null;
                                                            if (reportFailures === 0) {
                                                              matchFailed("\"DD\"");
                                                            }
                                                          }
                                                          if (result0 !== null) {
                                                            if (/^[YN]/.test(input.charAt(pos))) {
                                                              result1 = input.charAt(pos);
                                                              pos++;
                                                            } else {
                                                              result1 = null;
                                                              if (reportFailures === 0) {
                                                                matchFailed("[YN]");
                                                              }
                                                            }
                                                            if (result1 !== null) {
                                                              result2 = parse_Numeric2();
                                                              if (result2 !== null) {
                                                                result4 = parse_DayIndicator();
                                                                if (result4 !== null) {
                                                                  result3 = [];
                                                                  while (result4 !== null) {
                                                                    result3.push(result4);
                                                                    result4 = parse_DayIndicator();
                                                                  }
                                                                } else {
                                                                  result3 = null;
                                                                }
                                                                if (result3 !== null) {
                                                                  result0 = [result0, result1, result2, result3];
                                                                } else {
                                                                  result0 = null;
                                                                  pos = pos1;
                                                                }
                                                              } else {
                                                                result0 = null;
                                                                pos = pos1;
                                                              }
                                                            } else {
                                                              result0 = null;
                                                              pos = pos1;
                                                            }
                                                          } else {
                                                            result0 = null;
                                                            pos = pos1;
                                                          }
                                                          if (result0 !== null) {
                                                            result0 = (function(offset, qType, operator, days, dayIndicators) {
                                                              var op = (operator === 'Y')?"including": "excluding";
                                                              return processor.handleFunction({code: qType, days: days, op: op, data: dayIndicators});
                                                            })(pos0, result0[0], result0[1], result0[2], result0[3]);
                                                          }
                                                          if (result0 === null) {
                                                            pos = pos0;
                                                          }
                                                          if (result0 === null) {
                                                            pos0 = pos;
                                                            pos1 = pos;
                                                            if (input.substr(pos, 2) === "EH") {
                                                              result0 = "EH";
                                                              pos += 2;
                                                            } else {
                                                              result0 = null;
                                                              if (reportFailures === 0) {
                                                                matchFailed("\"EH\"");
                                                              }
                                                            }
                                                            if (result0 !== null) {
                                                              if (/^[YN]/.test(input.charAt(pos))) {
                                                                result1 = input.charAt(pos);
                                                                pos++;
                                                              } else {
                                                                result1 = null;
                                                                if (reportFailures === 0) {
                                                                  matchFailed("[YN]");
                                                                }
                                                              }
                                                              if (result1 !== null) {
                                                                result0 = [result0, result1];
                                                              } else {
                                                                result0 = null;
                                                                pos = pos1;
                                                              }
                                                            } else {
                                                              result0 = null;
                                                              pos = pos1;
                                                            }
                                                            if (result0 !== null) {
                                                              result0 = (function(offset, qType, operator) {
                                                                //this is MCC related field
                                                                return processor.handleBoolean({code: qType, op: operator});
                                                              })(pos0, result0[0], result0[1]);
                                                            }
                                                            if (result0 === null) {
                                                              pos = pos0;
                                                            }
                                                            if (result0 === null) {
                                                              pos0 = pos;
                                                              pos1 = pos;
                                                              if (input.substr(pos, 2) === "FL") {
                                                                result0 = "FL";
                                                                pos += 2;
                                                              } else {
                                                                result0 = null;
                                                                if (reportFailures === 0) {
                                                                  matchFailed("\"FL\"");
                                                                }
                                                              }
                                                              if (result0 !== null) {
                                                                if (/^[YN]/.test(input.charAt(pos))) {
                                                                  result1 = input.charAt(pos);
                                                                  pos++;
                                                                } else {
                                                                  result1 = null;
                                                                  if (reportFailures === 0) {
                                                                    matchFailed("[YN]");
                                                                  }
                                                                }
                                                                if (result1 !== null) {
                                                                  result0 = [result0, result1];
                                                                } else {
                                                                  result0 = null;
                                                                  pos = pos1;
                                                                }
                                                              } else {
                                                                result0 = null;
                                                                pos = pos1;
                                                              }
                                                              if (result0 !== null) {
                                                                result0 = (function(offset, qType, operator) {
                                                                  return processor.handleCondition ({
                                                                      op: (operator === 'Y')?"is":"greater than",
                                                                      code: qType,
                                                                      value: 0
                                                                  });
                                                                })(pos0, result0[0], result0[1]);
                                                              }
                                                              if (result0 === null) {
                                                                pos = pos0;
                                                              }
                                                              if (result0 === null) {
                                                                pos0 = pos;
                                                                pos1 = pos;
                                                                if (input.substr(pos, 2) === "HT") {
                                                                  result0 = "HT";
                                                                  pos += 2;
                                                                } else {
                                                                  result0 = null;
                                                                  if (reportFailures === 0) {
                                                                    matchFailed("\"HT\"");
                                                                  }
                                                                }
                                                                if (result0 !== null) {
                                                                  if (/^[YN]/.test(input.charAt(pos))) {
                                                                    result1 = input.charAt(pos);
                                                                    pos++;
                                                                  } else {
                                                                    result1 = null;
                                                                    if (reportFailures === 0) {
                                                                      matchFailed("[YN]");
                                                                    }
                                                                  }
                                                                  if (result1 !== null) {
                                                                    result0 = [result0, result1];
                                                                  } else {
                                                                    result0 = null;
                                                                    pos = pos1;
                                                                  }
                                                                } else {
                                                                  result0 = null;
                                                                  pos = pos1;
                                                                }
                                                                if (result0 !== null) {
                                                                  result0 = (function(offset, qType, operator) {
                                                                    //this is MCC related field
                                                                    return processor.handleBoolean({code: qType, op: operator});
                                                                  })(pos0, result0[0], result0[1]);
                                                                }
                                                                if (result0 === null) {
                                                                  pos = pos0;
                                                                }
                                                                if (result0 === null) {
                                                                  pos0 = pos;
                                                                  pos1 = pos;
                                                                  if (input.substr(pos, 2) === "IT") {
                                                                    result0 = "IT";
                                                                    pos += 2;
                                                                  } else {
                                                                    result0 = null;
                                                                    if (reportFailures === 0) {
                                                                      matchFailed("\"IT\"");
                                                                    }
                                                                  }
                                                                  if (result0 !== null) {
                                                                    if (/^[YN]/.test(input.charAt(pos))) {
                                                                      result1 = input.charAt(pos);
                                                                      pos++;
                                                                    } else {
                                                                      result1 = null;
                                                                      if (reportFailures === 0) {
                                                                        matchFailed("[YN]");
                                                                      }
                                                                    }
                                                                    if (result1 !== null) {
                                                                      result0 = [result0, result1];
                                                                    } else {
                                                                      result0 = null;
                                                                      pos = pos1;
                                                                    }
                                                                  } else {
                                                                    result0 = null;
                                                                    pos = pos1;
                                                                  }
                                                                  if (result0 !== null) {
                                                                    result0 = (function(offset, qType, operator) {
                                                                      // according to the documentation CP will be used instead
                                                                      console.log('not supported');
                                                                      return {fieldCode: qType, desc: "this field is not used according to the doc CP will be used instead"};
                                                                    })(pos0, result0[0], result0[1]);
                                                                  }
                                                                  if (result0 === null) {
                                                                    pos = pos0;
                                                                  }
                                                                  if (result0 === null) {
                                                                    pos0 = pos;
                                                                    pos1 = pos;
                                                                    if (input.substr(pos, 2) === "LV") {
                                                                      result0 = "LV";
                                                                      pos += 2;
                                                                    } else {
                                                                      result0 = null;
                                                                      if (reportFailures === 0) {
                                                                        matchFailed("\"LV\"");
                                                                      }
                                                                    }
                                                                    if (result0 !== null) {
                                                                      if (input.charCodeAt(pos) === 89) {
                                                                        result1 = "Y";
                                                                        pos++;
                                                                      } else {
                                                                        result1 = null;
                                                                        if (reportFailures === 0) {
                                                                          matchFailed("\"Y\"");
                                                                        }
                                                                      }
                                                                      if (result1 !== null) {
                                                                        if (/^[0-9]/.test(input.charAt(pos))) {
                                                                          result2 = input.charAt(pos);
                                                                          pos++;
                                                                        } else {
                                                                          result2 = null;
                                                                          if (reportFailures === 0) {
                                                                            matchFailed("[0-9]");
                                                                          }
                                                                        }
                                                                        if (result2 !== null) {
                                                                          result0 = [result0, result1, result2];
                                                                        } else {
                                                                          result0 = null;
                                                                          pos = pos1;
                                                                        }
                                                                      } else {
                                                                        result0 = null;
                                                                        pos = pos1;
                                                                      }
                                                                    } else {
                                                                      result0 = null;
                                                                      pos = pos1;
                                                                    }
                                                                    if (result0 !== null) {
                                                                      result0 = (function(offset, qType, operator, param) {
                                                                        return {fieldCode: qType, param: param, sentence: "Data Level (" + param +")"};
                                                                      })(pos0, result0[0], result0[1], result0[2]);
                                                                    }
                                                                    if (result0 === null) {
                                                                      pos = pos0;
                                                                    }
                                                                    if (result0 === null) {
                                                                      pos0 = pos;
                                                                      pos1 = pos;
                                                                      if (input.substr(pos, 2) === "MC") {
                                                                        result0 = "MC";
                                                                        pos += 2;
                                                                      } else {
                                                                        result0 = null;
                                                                        if (reportFailures === 0) {
                                                                          matchFailed("\"MC\"");
                                                                        }
                                                                      }
                                                                      if (result0 !== null) {
                                                                        if (/^[YN]/.test(input.charAt(pos))) {
                                                                          result1 = input.charAt(pos);
                                                                          pos++;
                                                                        } else {
                                                                          result1 = null;
                                                                          if (reportFailures === 0) {
                                                                            matchFailed("[YN]");
                                                                          }
                                                                        }
                                                                        if (result1 !== null) {
                                                                          result3 = parse_MccRange();
                                                                          if (result3 !== null) {
                                                                            result2 = [];
                                                                            while (result3 !== null) {
                                                                              result2.push(result3);
                                                                              result3 = parse_MccRange();
                                                                            }
                                                                          } else {
                                                                            result2 = null;
                                                                          }
                                                                          if (result2 !== null) {
                                                                            result0 = [result0, result1, result2];
                                                                          } else {
                                                                            result0 = null;
                                                                            pos = pos1;
                                                                          }
                                                                        } else {
                                                                          result0 = null;
                                                                          pos = pos1;
                                                                        }
                                                                      } else {
                                                                        result0 = null;
                                                                        pos = pos1;
                                                                      }
                                                                      if (result0 !== null) {
                                                                        result0 = (function(offset, qType, operator, mccRanges) {
                                                                            return processor.handleRange({code: qType, op: operator, data: mccRanges});
                                                                        })(pos0, result0[0], result0[1], result0[2]);
                                                                      }
                                                                      if (result0 === null) {
                                                                        pos = pos0;
                                                                      }
                                                                      if (result0 === null) {
                                                                        pos0 = pos;
                                                                        pos1 = pos;
                                                                        if (input.substr(pos, 2) === "MO") {
                                                                          result0 = "MO";
                                                                          pos += 2;
                                                                        } else {
                                                                          result0 = null;
                                                                          if (reportFailures === 0) {
                                                                            matchFailed("\"MO\"");
                                                                          }
                                                                        }
                                                                        if (result0 !== null) {
                                                                          if (/^[YN]/.test(input.charAt(pos))) {
                                                                            result1 = input.charAt(pos);
                                                                            pos++;
                                                                          } else {
                                                                            result1 = null;
                                                                            if (reportFailures === 0) {
                                                                              matchFailed("[YN]");
                                                                            }
                                                                          }
                                                                          if (result1 !== null) {
                                                                            result0 = [result0, result1];
                                                                          } else {
                                                                            result0 = null;
                                                                            pos = pos1;
                                                                          }
                                                                        } else {
                                                                          result0 = null;
                                                                          pos = pos1;
                                                                        }
                                                                        if (result0 !== null) {
                                                                          result0 = (function(offset, qType, operator) {
                                                                            //this is MCC related field
                                                                            return processor.handleBoolean({code: qType, op:operator});
                                                                          })(pos0, result0[0], result0[1]);
                                                                        }
                                                                        if (result0 === null) {
                                                                          pos = pos0;
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_AC() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[ACEKMNPRVXUWS]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ACEKMNPRVXUWS]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, char) {
            return char;
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_BIN() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Numeric3();
        if (result0 !== null) {
          result1 = parse_Numeric3();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, seq) {
            return seq.join("");
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_AR() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_AnyNoSpace();
        if (result0 !== null) {
          result1 = parse_AnyNoSpace();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, seq) {
            return seq.join("");
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Member() {
        var result0;
        
        if (/^[IAM]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[IAM]");
          }
        }
        return result0;
      }
      
      function parse_PR() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_CapsChar();
        if (result0 !== null) {
          result1 = parse_CapsChar();
          if (result1 !== null) {
            result2 = parse_CapsChar();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, seq) { return seq.join(""); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_CapsChar();
          if (result0 !== null) {
            result1 = parse_space();
            if (result1 !== null) {
              result2 = parse_space();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, char) {return char;})(pos0, result0[0]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_RE() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[1ABCDE]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[1ABCDE]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, char) { return {scheme: "MC", value: char};})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (/^[1234567]/.test(input.charAt(pos))) {
            result0 = input.charAt(pos);
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[1234567]");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, char) {return {scheme: "VI", value: char};})(pos0, result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_McCategoryCode() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 3) === "BIL") {
          result0 = "BIL";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"BIL\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, code) {return  getMasterCardCategoryCode(code);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.substr(pos, 3) === "DOM") {
            result0 = "DOM";
            pos += 3;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"DOM\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, code) {return  getMasterCardCategoryCode(code);})(pos0, result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            if (input.substr(pos, 3) === "SUB") {
              result0 = "SUB";
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"SUB\"");
              }
            }
            if (result0 !== null) {
              result0 = (function(offset, code) {return  getMasterCardCategoryCode(code);})(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              if (input.substr(pos, 3) === "TER") {
                result0 = "TER";
                pos += 3;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"TER\"");
                }
              }
              if (result0 !== null) {
                result0 = (function(offset, code) {return  getMasterCardCategoryCode(code);})(pos0, result0);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                if (input.substr(pos, 3) === "TRA") {
                  result0 = "TRA";
                  pos += 3;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"TRA\"");
                  }
                }
                if (result0 !== null) {
                  result0 = (function(offset, code) {return  getMasterCardCategoryCode(code);})(pos0, result0);
                }
                if (result0 === null) {
                  pos = pos0;
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_ViCategoryCode() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 3) === "DMB") {
          result0 = "DMB";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"DMB\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, code) {return  getVisaCategoryCode(code);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.substr(pos, 3) === "DMN") {
            result0 = "DMN";
            pos += 3;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"DMN\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, code) {return  getVisaCategoryCode(code);})(pos0, result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            if (input.substr(pos, 3) === "EXP") {
              result0 = "EXP";
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"EXP\"");
              }
            }
            if (result0 !== null) {
              result0 = (function(offset, code) {return  getVisaCategoryCode(code);})(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              if (input.substr(pos, 3) === "TER") {
                result0 = "TER";
                pos += 3;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"TER\"");
                }
              }
              if (result0 !== null) {
                result0 = (function(offset, code) {return  getVisaCategoryCode(code);})(pos0, result0);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                if (input.substr(pos, 3) === "TRA") {
                  result0 = "TRA";
                  pos += 3;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"TRA\"");
                  }
                }
                if (result0 !== null) {
                  result0 = (function(offset, code) {return  getVisaCategoryCode(code);})(pos0, result0);
                }
                if (result0 === null) {
                  pos = pos0;
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_SchemeType() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 67) {
          result0 = "C";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"C\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, code) {return {code: code, description: 'Cash'};})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.charCodeAt(pos) === 70) {
            result0 = "F";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"F\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, code) {return {code: code, description: 'Funding'};})(pos0, result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            if (input.charCodeAt(pos) === 80) {
              result0 = "P";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"P\"");
              }
            }
            if (result0 !== null) {
              result0 = (function(offset, code) {return {code: code, description: 'Purchase'};})(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_SchemeDescription() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20, result21, result22, result23, result24, result25, result26, result27, result28, result29, result30, result31, result32, result33, result34, result35;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Desc();
        if (result0 !== null) {
          result1 = parse_Desc();
          if (result1 !== null) {
            result2 = parse_Desc();
            if (result2 !== null) {
              result3 = parse_Desc();
              if (result3 !== null) {
                result4 = parse_Desc();
                if (result4 !== null) {
                  result5 = parse_Desc();
                  if (result5 !== null) {
                    result6 = parse_Desc();
                    if (result6 !== null) {
                      result7 = parse_Desc();
                      if (result7 !== null) {
                        result8 = parse_Desc();
                        if (result8 !== null) {
                          result9 = parse_Desc();
                          if (result9 !== null) {
                            result10 = parse_Desc();
                            if (result10 !== null) {
                              result11 = parse_Desc();
                              if (result11 !== null) {
                                result12 = parse_Desc();
                                if (result12 !== null) {
                                  result13 = parse_Desc();
                                  if (result13 !== null) {
                                    result14 = parse_Desc();
                                    if (result14 !== null) {
                                      result15 = parse_Desc();
                                      if (result15 !== null) {
                                        result16 = parse_Desc();
                                        if (result16 !== null) {
                                          result17 = parse_Desc();
                                          if (result17 !== null) {
                                            result18 = parse_Desc();
                                            if (result18 !== null) {
                                              result19 = parse_Desc();
                                              if (result19 !== null) {
                                                result20 = parse_Desc();
                                                if (result20 !== null) {
                                                  result21 = parse_Desc();
                                                  if (result21 !== null) {
                                                    result22 = parse_Desc();
                                                    if (result22 !== null) {
                                                      result23 = parse_Desc();
                                                      if (result23 !== null) {
                                                        result24 = parse_Desc();
                                                        if (result24 !== null) {
                                                          result25 = parse_Desc();
                                                          if (result25 !== null) {
                                                            result26 = parse_Desc();
                                                            if (result26 !== null) {
                                                              result27 = parse_Desc();
                                                              if (result27 !== null) {
                                                                result28 = parse_Desc();
                                                                if (result28 !== null) {
                                                                  result29 = parse_Desc();
                                                                  if (result29 !== null) {
                                                                    result30 = parse_Desc();
                                                                    if (result30 !== null) {
                                                                      result31 = parse_Desc();
                                                                      if (result31 !== null) {
                                                                        result32 = parse_Desc();
                                                                        if (result32 !== null) {
                                                                          result33 = parse_Desc();
                                                                          if (result33 !== null) {
                                                                            result34 = parse_Desc();
                                                                            if (result34 !== null) {
                                                                              result35 = parse_Desc();
                                                                              if (result35 !== null) {
                                                                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20, result21, result22, result23, result24, result25, result26, result27, result28, result29, result30, result31, result32, result33, result34, result35];
                                                                              } else {
                                                                                result0 = null;
                                                                                pos = pos1;
                                                                              }
                                                                            } else {
                                                                              result0 = null;
                                                                              pos = pos1;
                                                                            }
                                                                          } else {
                                                                            result0 = null;
                                                                            pos = pos1;
                                                                          }
                                                                        } else {
                                                                          result0 = null;
                                                                          pos = pos1;
                                                                        }
                                                                      } else {
                                                                        result0 = null;
                                                                        pos = pos1;
                                                                      }
                                                                    } else {
                                                                      result0 = null;
                                                                      pos = pos1;
                                                                    }
                                                                  } else {
                                                                    result0 = null;
                                                                    pos = pos1;
                                                                  }
                                                                } else {
                                                                  result0 = null;
                                                                  pos = pos1;
                                                                }
                                                              } else {
                                                                result0 = null;
                                                                pos = pos1;
                                                              }
                                                            } else {
                                                              result0 = null;
                                                              pos = pos1;
                                                            }
                                                          } else {
                                                            result0 = null;
                                                            pos = pos1;
                                                          }
                                                        } else {
                                                          result0 = null;
                                                          pos = pos1;
                                                        }
                                                      } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                      }
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, chars) {
            //36 symbols
            return chars.join("");
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DataAttribute40() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SchemeDescription();
        if (result0 !== null) {
          result1 = parse_Desc();
          if (result1 !== null) {
            result2 = parse_Desc();
            if (result2 !== null) {
              result3 = parse_Desc();
              if (result3 !== null) {
                result4 = parse_Desc();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, chars) {
            //40 symbols
            return chars.join("").trim();
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ReimbursementAttribute() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[A-Z0-9]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Z0-9]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, attribute) {return attribute;})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_space();
          if (result0 !== null) {
            result0 = (function(offset) { return undefined;})(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_InterchangeRateDesignator() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_Char2();
        if (result0 !== null) {
          result0 = (function(offset, rate) {return rate;})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_space();
          if (result0 !== null) {
            result1 = parse_space();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset) {return undefined})(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_Desc() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.length > pos) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, ch) {
            return ch;
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 36) {
            result0 = "$";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"$\"");
            }
          }
        }
        return result0;
      }
      
      function parse_DayIndicator() {
        var result0;
        
        if (/^[TPSBNW]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[TPSBNW]");
          }
        }
        return result0;
      }
      
      function parse_FlatFee() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[ +\-]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ +\\-]");
          }
        }
        if (result0 !== null) {
          result1 = parse_Numeric7();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, sign, rate) {return {rate: rate, sign: sign };})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_FlatFeeCurrency() {
        var result0, result1, result2;
        var pos0, pos1;
        
        result0 = parse_Currency();
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_space();
          if (result0 !== null) {
            result1 = parse_space();
            if (result1 !== null) {
              result2 = parse_space();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset) {return undefined;})(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_FPIIndicator() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_AnyChar();
        if (result0 !== null) {
          result1 = parse_AnyChar();
          if (result1 !== null) {
            result2 = parse_AnyChar();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, seq) {
            return seq.join("");
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_MccRange() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Numeric4();
        if (result0 !== null) {
          result1 = parse_Numeric4();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, lowRange, topRange) {
            return {
                low: lowRange,
                top: topRange
            }
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_FileType() {
        var result0;
        
        if (input.substr(pos, 2) === "C1") {
          result0 = "C1";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"C1\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "C2") {
            result0 = "C2";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"C2\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 2) === "C4") {
              result0 = "C4";
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"C4\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 2) === "IT") {
                result0 = "IT";
                pos += 2;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"IT\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 2) === "LO") {
                  result0 = "LO";
                  pos += 2;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"LO\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos, 2) === "CR") {
                    result0 = "CR";
                    pos += 2;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"CR\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos, 2) === "PA") {
                      result0 = "PA";
                      pos += 2;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"PA\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos, 2) === "LI") {
                        result0 = "LI";
                        pos += 2;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"LI\"");
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_CharOrSpace() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_AnyChar();
        if (result0 !== null) {
          result0 = (function(offset, char) {return char;})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_space();
          if (result0 !== null) {
            result0 = (function(offset) {return undefined;})(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_Numeric7() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Numeric4();
        if (result0 !== null) {
          result1 = parse_Numeric3();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, part1, part2) {
            return part1 + part2;
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Numeric6() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Numeric3();
        if (result0 !== null) {
          result1 = parse_Numeric3();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, seq) {
              return seq.join("");
            })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Numeric4() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result0 !== null) {
          if (/^[0-9]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (result1 !== null) {
            if (/^[0-9]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            if (result2 !== null) {
              if (/^[0-9]/.test(input.charAt(pos))) {
                result3 = input.charAt(pos);
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, seq1, seq2, seq3, seq4) {
                return seq1+seq2+seq3+seq4;
          })(pos0, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Numeric3() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result0 !== null) {
          if (/^[0-9]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (result1 !== null) {
            if (/^[0-9]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, seq) {
            return seq.join("");
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Numeric2() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result0 !== null) {
          if (/^[0-9]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, seq1, seq2) {
            return seq1+seq2;
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Char4() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[A-Za-z0-9 ]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Za-z0-9 ]");
          }
        }
        if (result0 !== null) {
          if (/^[A-Za-z0-9 ]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[A-Za-z0-9 ]");
            }
          }
          if (result1 !== null) {
            if (/^[A-Za-z0-9 ]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[A-Za-z0-9 ]");
              }
            }
            if (result2 !== null) {
              if (/^[A-Za-z0-9 ]/.test(input.charAt(pos))) {
                result3 = input.charAt(pos);
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[A-Za-z0-9 ]");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, ch1, ch2, ch3, ch4) {
            return ch1+ ch2 +ch3 +ch4;
          })(pos0, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Char2() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_AnyNoSpace();
        if (result0 !== null) {
          result1 = parse_AnyNoSpace();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, chars) {
                return chars.join("");
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_CapsChar() {
        var result0;
        
        if (/^[A-Z]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Z]");
          }
        }
        return result0;
      }
      
      function parse_AnyChar() {
        var result0;
        
        if (/^[a-zA-Z 0-9'=]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z 0-9'=]");
          }
        }
        return result0;
      }
      
      function parse_AnyNoSpace() {
        var result0;
        
        if (/^[a-zA-Z0-9'=]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z0-9'=]");
          }
        }
        return result0;
      }
      
      function parse_Comment() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "**") {
          result0 = "**";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"**\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_LineTerminator();
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_SourceCharacter();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            pos3 = pos;
            reportFailures++;
            result2 = parse_LineTerminator();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result3 = parse_SourceCharacter();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, marker, details) {
            var comment = (details !== undefined)?details.join("").trim():"";
            console.log(comment);
            return marker + comment;
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_LineTerminator() {
        var result0;
        
        if (/^[\n\r\u2028\u2029]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\n\\r\\u2028\\u2029]");
          }
        }
        return result0;
      }
      
      function parse_LineTerminatorSequence() {
        var result0;
        
        reportFailures++;
        if (input.charCodeAt(pos) === 10) {
          result0 = "\n";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\n\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "\r\n") {
            result0 = "\r\n";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\r\\n\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 13) {
              result0 = "\r";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\r\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 8232) {
                result0 = "\u2028";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\u2028\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 8233) {
                  result0 = "\u2029";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\u2029\"");
                  }
                }
              }
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("end of line");
        }
        return result0;
      }
      
      function parse_SourceCharacter() {
        var result0;
        
        if (input.length > pos) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        return result0;
      }
      
      function parse_Currency() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_CapsChar();
        if (result0 !== null) {
          result1 = parse_CapsChar();
          if (result1 !== null) {
            result2 = parse_CapsChar();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, chars) { return chars.join("");})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_EndOfLine() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        if (input.substr(pos, 2) === "\r\n") {
          result1 = "\r\n";
          pos += 2;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\r\\n\"");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (input.substr(pos, 2) === "\r\n") {
            result1 = "\r\n";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\r\\n\"");
            }
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (input.charCodeAt(pos) === 10) {
            result2 = "\n";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\n\"");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (input.charCodeAt(pos) === 10) {
              result2 = "\n";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\n\"");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Characters() {
        var result0;
        
        if (/^[>=\/#.$w 0-9A-Za-z:\-]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[>=\\/#.$w 0-9A-Za-z:\\-]");
          }
        }
        return result0;
      }
      
      function parse_space() {
        var result0;
        
        if (/^[ \t\n\r]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\n\\r]");
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
       console.log('parser initialization');
        var processor = require("./processor.js");
        McCategoryCodes = {
          BIL: 'Bi-Lateral Settlement',
          DOM: 'Domestic',
          SUB: 'Sub-Regional',
          TER: 'Inter-Regional',
          TRA: 'Intra-Regional'
      
        };
      
        ViCategoryCode = {
          DMB: 'UK Domestic',
          DMN: 'Non UK Domestic',
          EXP: 'Exported Domestic',
          TER: 'Inter Regional',
          TRA: 'Intra Regional'
        };
      
        function getMasterCardCategoryCode(id) {
          return {code: id, description: McCategoryCodes[id]};
        }
      
        function getVisaCategoryCode(id) {
          return {code: id, description: ViCategoryCode[id]};
        }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
