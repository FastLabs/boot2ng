module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "FileContent": parse_FileContent,
        "Block": parse_Block,
        "Record": parse_Record,
        "MasterCardPrefix": parse_MasterCardPrefix,
        "VisaPrefix": parse_VisaPrefix,
        "DetailRecord": parse_DetailRecord,
        "QualificationRecord": parse_QualificationRecord,
        "McCategoryCode": parse_McCategoryCode,
        "ViCategoryCode": parse_ViCategoryCode,
        "SchemeType": parse_SchemeType,
        "SchemeDescription": parse_SchemeDescription,
        "ReimbursementAttribute": parse_ReimbursementAttribute,
        "InterchangeRateDesignator": parse_InterchangeRateDesignator,
        "Desc": parse_Desc,
        "Numeric4": parse_Numeric4,
        "Numeric3": parse_Numeric3,
        "Numeric2": parse_Numeric2,
        "Char4": parse_Char4,
        "Char2": parse_Char2,
        "AnyChar": parse_AnyChar,
        "Comment": parse_Comment,
        "EndOfLine": parse_EndOfLine,
        "Characters": parse_Characters,
        "space": parse_space
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_FileContent();
        if (result0 !== null) {
          result0 = (function(offset, content) {
            //console.log(getMasterCardCategoryCode('BIL'));
            return content;
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_FileContent() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_Comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_Comment();
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_Block();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_Block();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, block) {
            console.log(JSON.stringify(block) +"\n");
            return block;
          })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Block() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_DetailRecord();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_QualificationRecord();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_QualificationRecord();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, detail, qualification) {
            if(qualification) {
                detail.qualification = qualification;
            }
            return detail;
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Record() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MasterCardPrefix();
        if (result0 !== null) {
          result1 = parse_SchemeType();
          if (result1 !== null) {
            result2 = parse_Numeric4();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, prefix, scheme, seq) {
              prefix.scheme = scheme;
              prefix.sequence = seq;
              return prefix;
          })(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_VisaPrefix();
          if (result0 !== null) {
            result1 = parse_SchemeType();
            if (result1 !== null) {
              result2 = parse_Numeric4();
              if (result2 !== null) {
                result3 = parse_EndOfLine();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, prefix, scheme, seq) {
                  prefix.scheme = scheme;
                  prefix.sequence = seq;
                  return prefix;
            })(pos0, result0[0], result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_MasterCardPrefix() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "MC") {
          result0 = "MC";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"MC\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_McCategoryCode();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, scheme, categoryCode) {
            return {scheme: 'MasterCard', categoryCode: categoryCode }
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_VisaPrefix() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "VI") {
          result0 = "VI";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"VI\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_ViCategoryCode();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, scheme, categoryCode) {
            return {scheme: 'Visa', categoryCode: categoryCode }
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DetailRecord() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Record();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "DT") {
            result1 = "DT";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"DT\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_Numeric2();
            if (result2 !== null) {
              result3 = parse_Numeric3();
              if (result3 !== null) {
                result4 = parse_Numeric3();
                if (result4 !== null) {
                  result5 = parse_SchemeDescription();
                  if (result5 !== null) {
                    result6 = parse_Char4();
                    if (result6 !== null) {
                      result7 = parse_ReimbursementAttribute();
                      if (result7 !== null) {
                        result8 = parse_InterchangeRateDesignator();
                        if (result8 !== null) {
                          result9 = parse_EndOfLine();
                          if (result9 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, record, subSequence, itemId, schemeId, description, feeRule, reimbursement, rateDesignator) {
            console.log(description);
            record.subSequence = subSequence;
            record.itemId = itemId;
            record.schemeId = schemeId;
            if(reimbursement) {
                record.reimbursementAttribute = reimbursement;
            }
            if(rateDesignator) {
                record.interchangeRateDesignator = rateDesignator;
            }
            return record;
          })(pos0, result0[0], result0[2], result0[3], result0[4], result0[5], result0[6], result0[7], result0[8]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_QualificationRecord() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Record();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "QU") {
            result1 = "QU";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"QU\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_Numeric2();
            if (result2 !== null) {
              result3 = parse_Char2();
              if (result3 !== null) {
                result4 = parse_EndOfLine();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, record, subSequence, qualificationType) {
            record.subSequence = subSequence;
            record.qualificationType = qualificationType;
            return record;
          })(pos0, result0[0], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_McCategoryCode() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 3) === "BIL") {
          result0 = "BIL";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"BIL\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, code) {return  getMasterCardCategoryCode(code);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.substr(pos, 3) === "DOM") {
            result0 = "DOM";
            pos += 3;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"DOM\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, code) {return  getMasterCardCategoryCode(code);})(pos0, result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_ViCategoryCode() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 3) === "DMB") {
          result0 = "DMB";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"DMB\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, code) {return  getVisaCategoryCode(code);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.substr(pos, 3) === "DMN") {
            result0 = "DMN";
            pos += 3;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"DMN\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, code) {return  getVisaCategoryCode(code);})(pos0, result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_SchemeType() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 67) {
          result0 = "C";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"C\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, code) {return {code: code, description: 'Cash'};})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.charCodeAt(pos) === 70) {
            result0 = "F";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"F\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, code) {return {code: code, description: 'Funding'};})(pos0, result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            if (input.charCodeAt(pos) === 80) {
              result0 = "P";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"P\"");
              }
            }
            if (result0 !== null) {
              result0 = (function(offset, code) {return {code: code, description: 'Purchase'};})(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_SchemeDescription() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20, result21, result22, result23, result24, result25, result26, result27, result28, result29, result30, result31, result32, result33, result34, result35;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Desc();
        if (result0 !== null) {
          result1 = parse_Desc();
          if (result1 !== null) {
            result2 = parse_Desc();
            if (result2 !== null) {
              result3 = parse_Desc();
              if (result3 !== null) {
                result4 = parse_Desc();
                if (result4 !== null) {
                  result5 = parse_Desc();
                  if (result5 !== null) {
                    result6 = parse_Desc();
                    if (result6 !== null) {
                      result7 = parse_Desc();
                      if (result7 !== null) {
                        result8 = parse_Desc();
                        if (result8 !== null) {
                          result9 = parse_Desc();
                          if (result9 !== null) {
                            result10 = parse_Desc();
                            if (result10 !== null) {
                              result11 = parse_Desc();
                              if (result11 !== null) {
                                result12 = parse_Desc();
                                if (result12 !== null) {
                                  result13 = parse_Desc();
                                  if (result13 !== null) {
                                    result14 = parse_Desc();
                                    if (result14 !== null) {
                                      result15 = parse_Desc();
                                      if (result15 !== null) {
                                        result16 = parse_Desc();
                                        if (result16 !== null) {
                                          result17 = parse_Desc();
                                          if (result17 !== null) {
                                            result18 = parse_Desc();
                                            if (result18 !== null) {
                                              result19 = parse_Desc();
                                              if (result19 !== null) {
                                                result20 = parse_Desc();
                                                if (result20 !== null) {
                                                  result21 = parse_Desc();
                                                  if (result21 !== null) {
                                                    result22 = parse_Desc();
                                                    if (result22 !== null) {
                                                      result23 = parse_Desc();
                                                      if (result23 !== null) {
                                                        result24 = parse_Desc();
                                                        if (result24 !== null) {
                                                          result25 = parse_Desc();
                                                          if (result25 !== null) {
                                                            result26 = parse_Desc();
                                                            if (result26 !== null) {
                                                              result27 = parse_Desc();
                                                              if (result27 !== null) {
                                                                result28 = parse_Desc();
                                                                if (result28 !== null) {
                                                                  result29 = parse_Desc();
                                                                  if (result29 !== null) {
                                                                    result30 = parse_Desc();
                                                                    if (result30 !== null) {
                                                                      result31 = parse_Desc();
                                                                      if (result31 !== null) {
                                                                        result32 = parse_Desc();
                                                                        if (result32 !== null) {
                                                                          result33 = parse_Desc();
                                                                          if (result33 !== null) {
                                                                            result34 = parse_Desc();
                                                                            if (result34 !== null) {
                                                                              result35 = parse_Desc();
                                                                              if (result35 !== null) {
                                                                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20, result21, result22, result23, result24, result25, result26, result27, result28, result29, result30, result31, result32, result33, result34, result35];
                                                                              } else {
                                                                                result0 = null;
                                                                                pos = pos1;
                                                                              }
                                                                            } else {
                                                                              result0 = null;
                                                                              pos = pos1;
                                                                            }
                                                                          } else {
                                                                            result0 = null;
                                                                            pos = pos1;
                                                                          }
                                                                        } else {
                                                                          result0 = null;
                                                                          pos = pos1;
                                                                        }
                                                                      } else {
                                                                        result0 = null;
                                                                        pos = pos1;
                                                                      }
                                                                    } else {
                                                                      result0 = null;
                                                                      pos = pos1;
                                                                    }
                                                                  } else {
                                                                    result0 = null;
                                                                    pos = pos1;
                                                                  }
                                                                } else {
                                                                  result0 = null;
                                                                  pos = pos1;
                                                                }
                                                              } else {
                                                                result0 = null;
                                                                pos = pos1;
                                                              }
                                                            } else {
                                                              result0 = null;
                                                              pos = pos1;
                                                            }
                                                          } else {
                                                            result0 = null;
                                                            pos = pos1;
                                                          }
                                                        } else {
                                                          result0 = null;
                                                          pos = pos1;
                                                        }
                                                      } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                      }
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, chars) {
            return chars.join("");
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ReimbursementAttribute() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[A-Z]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Z]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, attribute) {return attribute;})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_space();
          if (result0 !== null) {
            result0 = (function(offset) { return undefined;})(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_InterchangeRateDesignator() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_Char2();
        if (result0 !== null) {
          result0 = (function(offset, rate) {return rate;})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_space();
          if (result0 !== null) {
            result1 = parse_space();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset) {return undefined})(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_Desc() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.length > pos) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, ch) {
            return ch;
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Numeric4() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result0 !== null) {
          if (/^[0-9]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (result1 !== null) {
            if (/^[0-9]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            if (result2 !== null) {
              if (/^[0-9]/.test(input.charAt(pos))) {
                result3 = input.charAt(pos);
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, seq1, seq2, seq3, seq4) {
                return seq1+seq2+seq3+seq4;
          })(pos0, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Numeric3() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result0 !== null) {
          if (/^[0-9]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (result1 !== null) {
            if (/^[0-9]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, seq1, seq2, seq3) {
                    return seq1+seq2+seq3;
          })(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Numeric2() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result0 !== null) {
          if (/^[0-9]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, seq1, seq2) {
                    return seq1+seq2;
           })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Char4() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[a-z]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-z]");
          }
        }
        if (result0 !== null) {
          if (/^[a-z]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[a-z]");
            }
          }
          if (result1 !== null) {
            if (/^[a-z]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[a-z]");
              }
            }
            if (result2 !== null) {
              if (/^[a-z]/.test(input.charAt(pos))) {
                result3 = input.charAt(pos);
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[a-z]");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, ch1, ch2, ch3, ch4) {
            return ch1+ ch2 +ch3 +ch4;
          })(pos0, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Char2() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_AnyChar();
        if (result0 !== null) {
          result1 = parse_AnyChar();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, chars) {
                return chars.join("");
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_AnyChar() {
        var result0;
        
        if (/^[a-zA-Z]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z]");
          }
        }
        return result0;
      }
      
      function parse_Comment() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "**") {
          result0 = "**";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"**\"");
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 32) {
            result2 = " ";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\" \"");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (input.charCodeAt(pos) === 32) {
                result2 = " ";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\" \"");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_Characters();
            if (result2 !== null) {
              result3 = parse_EndOfLine();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, comment, details) {
            return comment + details;
          })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_EndOfLine() {
        var result0, result1, result2, result3;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        if (input.substr(pos, 2) === "\r\n") {
          result1 = "\r\n";
          pos += 2;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\r\\n\"");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (input.substr(pos, 2) === "\r\n") {
            result1 = "\r\n";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\r\\n\"");
            }
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (input.charCodeAt(pos) === 36) {
            result2 = "$";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"$\"");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (input.charCodeAt(pos) === 36) {
              result2 = "$";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"$\"");
              }
            }
          }
          if (result1 !== null) {
            result2 = [];
            if (input.charCodeAt(pos) === 10) {
              result3 = "\n";
              pos++;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\n\"");
              }
            }
            while (result3 !== null) {
              result2.push(result3);
              if (input.charCodeAt(pos) === 10) {
                result3 = "\n";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\n\"");
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Characters() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[a-z ]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[a-z ]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[a-z ]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[a-z ]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, text) {
          	return text.join("");
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_space() {
        var result0;
        
        if (/^[ \t\n\r]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\n\\r]");
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
       console.log('parser initialization');
      
        McCategoryCodes = {
          BIL: 'Bi-Lateral Settlement',
          DOM: 'Domestic'
        };
      
        ViCategoryCode = {
          DMB: 'UK Domestic',
          DMN: 'Non UK Domestic'
        };
      
        function getMasterCardCategoryCode(id) {
          return {code: id, description: McCategoryCodes[id]};
        }
      
        function getVisaCategoryCode(id) {
          return {code: id, description: ViCategoryCode[id]};
        }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
