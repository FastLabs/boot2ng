{
 console.log('parser initialization');

  McCategoryCodes = {
    BIL: 'Bi-Lateral Settlement',
    DOM: 'Domestic'
  };

  ViCategoryCode = {
    DMB: 'UK Domestic',
    DMN: 'Non UK Domestic'
  };

  function getMasterCardCategoryCode(id) {
    return {code: id, description: McCategoryCodes[id]};
  }

  function getVisaCategoryCode(id) {
    return {code: id, description: ViCategoryCode[id]};
  }
}

start
  = content: FileContent {
    //console.log(getMasterCardCategoryCode('BIL'));
    return content;
  }

FileContent
  = (Comment)* block: (Block)* {
    console.log(JSON.stringify(block) +"\n");
    return block;
  }

Block
  = detail: DetailRecord qualification: (QualificationRecord)* {
    if(qualification) {
        detail.qualification = qualification;
    }
    return detail;
  }
Record
  = prefix: MasterCardPrefix scheme: SchemeType seq: ProcessingSequence  {
      prefix.scheme = scheme;
      prefix.sequence = seq;
      return prefix;
  }
  /  prefix: VisaPrefix scheme: SchemeType seq: ProcessingSequence EndOfLine {
        prefix.scheme = scheme;
        prefix.sequence = seq;
        return prefix;
  }

MasterCardPrefix
  = scheme: 'MC' categoryCode: McCategoryCode {
    return {scheme: 'MasterCard', categoryCode: categoryCode }
  }

VisaPrefix
  = scheme: 'VI' categoryCode: ViCategoryCode {
    return {scheme: 'Visa', categoryCode: categoryCode }
  }

DetailRecord
  = record: Record 'DT' subSequence: Numeric2 itemId: Numeric3 schemeId: Numeric3 description: SchemeDescription
   feeRule: Char4 reimbursement: ReimbursementAttribute rateDesignator: InterchangeRateDesignator
   EndOfLine {
    console.log(description);
    record.subSequence = subSequence;
    record.itemId = itemId;
    record.schemeId = schemeId;
    if(reimbursement) {
        record.reimbursementAttribute = reimbursement;
    }
    if(rateDesignator) {
        record.interchangeRateDesignator = rateDesignator;
    }
    return record;
  }
QualificationRecord
  = record: Record 'QU' subSequence: Numeric2 qualificationType: Char2 EndOfLine {
    record.subSequence = subSequence;
    record.qualificationType = qualificationType;
    return record;
  }

McCategoryCode
  = code: 'BIL' {return  getMasterCardCategoryCode(code);}
   / code: 'DOM' {return  getMasterCardCategoryCode(code);}

ViCategoryCode
  = code: 'DMB' {return  getVisaCategoryCode(code);}
   / code: 'DMN' {return  getVisaCategoryCode(code);}

SchemeType
  = code: 'C' {return {code: code, description: 'Cash'};}
   / code: 'F' {return {code: code, description: 'Funding'};}
   / code: 'P' {return {code: code, description: 'Purchase'};}

SchemeDescription
  = chars: ( Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc ) {
    return chars.join("");
  }

ReimbursementAttribute
  = attribute: [A-Z] {return attribute;}
    /space  { return undefined;}

InterchangeRateDesignator
  = rate: Char2 {return rate;}
  / space space {return undefined};
Desc
  = ch: . {
    return ch;
  }

ProcessingSequence
  = Numeric4

FlatFee
  = sigh:

Numeric4
  = seq1: [0-9] seq2:[0-9] seq3:[0-9] seq4:[0-9] {
        return seq1+seq2+seq3+seq4;
  }

Numeric3
  = seq1: [0-9] seq2:[0-9] seq3:[0-9] {
            return seq1+seq2+seq3;
  }

Numeric2
  = seq1: [0-9] seq2:[0-9] {
            return seq1+seq2;
   }
Char4
  = ch1:[a-z] ch2:[a-z] ch3: [a-z] ch4: [a-z] {
    return ch1+ ch2 +ch3 +ch4;
  }
Char2
  = chars : (AnyChar AnyChar) {
        return chars.join("");
  }
AnyChar
  = [a-zA-Z]
Comment
  = comment: ('**')(' ')+ details: Characters EndOfLine {
    return comment + details;
  }

EndOfLine
  = ('\r\n')* ('$')* ('\n')*

Characters
  = text: [a-z ]+ {
  	return text.join("");
  }
space
  = [ \t\n\r]
