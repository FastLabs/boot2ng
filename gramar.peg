{
 console.log('parser initialization');
  var processor = require("./processor.js");
  McCategoryCodes = {
    BIL: 'Bi-Lateral Settlement',
    DOM: 'Domestic',
    SUB: 'Sub-Regional',
    TER: 'Inter-Regional',
    TRA: 'Intra-Regional'

  };

  ViCategoryCode = {
    DMB: 'UK Domestic',
    DMN: 'Non UK Domestic',
    EXP: 'Exported Domestic',
    TER: 'Inter Regional',
    TRA: 'Intra Regional'
  };

  function getMasterCardCategoryCode(id) {
    return {code: id, description: McCategoryCodes[id]};
  }

  function getVisaCategoryCode(id) {
    return {code: id, description: ViCategoryCode[id]};
  }

  var dataFields = [];

  function addDataFieldIfNotPresent(field) {
    var fieldCount = dataFields.length;
    for(var i=0; i<fieldCount; i++) {
        if(field.code === dataFields[i].code) {
            return;
        }
    }
    dataFields.push(field);
  }
}

start
  = content: FileContent {
  var count = 0;
   /* dataFields.forEach(function(dataField) {
        console.log(count++ + '"' + dataField.code +'", // ' + dataField.fieldName);
    });*/
    return content;
  }

FileContent
  =  block: (Block )*  {
    return block;
  }

Block
  = detail: DetailRecord
    qualification: (QualificationRecord)*  {
    if(qualification) {
        detail.qualification = qualification;
    }
    return detail;
  }

Record
  = prefix: MasterCardPrefix scheme: SchemeType seq: ProcessingSequence  {
      prefix.scheme = scheme;
      prefix.sequence = seq;
      return prefix;
  }
  /  prefix: VisaPrefix scheme: SchemeType seq: ProcessingSequence {
        prefix.scheme = scheme;
        prefix.sequence = seq;
        return prefix;
  }

MasterCardPrefix
  = scheme: 'MC' categoryCode: McCategoryCode {
    return {scheme: 'MasterCard', categoryCode: categoryCode }
  }

VisaPrefix
  = scheme: 'VI' categoryCode: ViCategoryCode {
    return {scheme: 'Visa', categoryCode: categoryCode }
  }

DetailRecord
  = record: Record 'DT' subSequence: Numeric2 itemId: Numeric3 schemeId: Numeric3 description: DataAttribute40
   reimbursement: ReimbursementAttribute rateDesignator: InterchangeRateDesignator
   feePercentage: FeePercentage flatFee: FlatFee feeCurrency: FlatFeeCurrency
   minFee: MinimumFee intIndicator: InternationalIndicator psi: PaymentServiceIndicator
   eci: ECIIndicator fpi: FPIIndicator maxFee: MaximumFee (' ')* ('\t')*
   (LineTerminatorSequence?) {
    var value;
    record.subSequence = subSequence;
    record.description = description;
    record.itemId = itemId;
    record.schemeId = schemeId;
    if(reimbursement) {
        record.reimbursementAttribute = reimbursement;
    }
    value = processor.valuePresent(rateDesignator);
    if(value) {
        record.interchangeRateDesignator = value;
    }
    record.feePercentage = feePercentage;
    record.flatFee = flatFee;
    record.minFee = minFee;
    record.maxFee = maxFee;
    value = processor.valuePresent(intIndicator);
    if(value) {
        record.intIndicator = value;
    }
    value = processor.valuePresent(psi);
    if(value) {
        record.paymentServiceIndicator = value;
    }
    value = processor.valuePresent(eci);
    if(value) {
        record.eciIndicator = value;
    }
    value = processor.valuePresent(fpi);
    if(value) {
        record.fpiIndicator = value;
    }
    value = processor.valuePresent(feeCurrency);
    if(value) {
      record.flatFee.currency = value;
    }
    return record;
  }
QualificationRecord
  = record: Record 'QU' subSequence: Numeric2 qualification: QualificationDetails (' ')* (LineTerminatorSequence?) {
    var result = {};
    result.subSequence = subSequence;
    if(qualification) {
        result.qualification = qualification;
    } else {console.log("!!!!!!!!!!!!!!!!!!!!!!!1")}
    return result;
  }
QualificationDetails
  = qType: 'AC'  operator: [YN] authChars: (AC)+ {
    return processor.handleCollection({code: qType, op: operator, data: authChars});
  }
  / qType: 'AI' operator: [YN] {
    //this is MCC field
    return processor.handleBoolean({op:operator, code: qType});
  }
  / qType: 'AB' operator: [YN] binList: (BIN)+ {
    return processor.handleCollection({code: qType, op:operator, data: binList});
  }
  / qType: 'AR' operator: [YN] respCodes: (AR)+ {
    return processor.handleCollection({code: qType, op: operator, data: respCodes});
  }
  / qType: 'AU' operator: [YN] {
    return processor.handleBoolean({op: operator, code: qType});
  }
  / qType: 'AV' operator: [YN] data: (AnyChar)+ {
    return processor.handleCollection({code: qType, op: operator, data: data.join("").trim()});
  }
  / qType: 'BS' operator: [YN] bsaCol: (Numeric7)+ {
    return processor.handleCollection({code: qType, op: operator, data: bsaCol});
  }
  / qType: 'BT' operator: [YN] bstCol: (Numeric7)+ {
    return processor.handleCollection({code: qType, op: operator, data: bstCol});
  }
  / qType: 'CA' operator: [YN1-4] {
    var desc;
    if(operator === "Y") {
        desc = "numeric and > 0"
    } else if(operator === "N"){
        desc = "0"
    } else {
        desc = operator;
    }
    return {fieldCode: qType, data: desc, op:"", sentence : "CAT code" + desc};
  }
  / qType: 'CC' operator: [YN] m1: Member m2:Member m3: (Member)* {
    var data = [m1, m2];
    if(m3 !== undefined && m3 !== null && m3.length > 0) {
        data.push(m3[0]);
    }
    return processor.handleFunction({code: qType, op: (operator === 'Y')?"":"not", data: data});
  }
  / qType: 'CP' operator: [YN] values: (Char2)+ {
    return processor.handleCollection({code: qType, op: operator, data: values});
  }
  / qType: 'CQ' operator: [YN] {
    return processor.handleBoolean({code: qType, op: operator});
  }
  / qType: 'CR' operator: [YN] {
    //checks the MCC
    return processor.handleBoolean({code: qType, op: operator});
  }
  / qType: 'CS' operator: [YN] values: (Char2) + {
    return processor.handleCollection({code: qType, op: operator, data: values});
  }
  / qType: 'CT' operator: [YN] country: Country m1: Member theRest: (Member)* {
    var rest = "";
    theRest.forEach(function(memberCode) {
        rest += (", " +memberCode);
    });
    var desc = processor.MemberMap[m1] + rest + ((rest.length ===0)?" is":" are ") + ((operator === 'Y')?"":" not ") +" located in " +country;
    return {fieldCode: qType, sentence: desc, country: country};
  }
  / qType: 'CV' operator: [YN] data: (CardholderValidation)+{
    return processor.handleCollection({code: qType, op: operator, data: data});
  }
  /qType: 'DA' operator: [YN] fileType: FileType position: Numeric3 length: Numeric2 value: DataAttribute40 comment: (AnyChar)*{
    var sentence = comment.join("").trim(),
        fieldCode = fileType +"" +position;// there are few columns with different length but i think it doesn't matter +""+length;
    addDataFieldIfNotPresent({code: fieldCode, fieldName: sentence});
    return {fieldCode: fieldCode, fileType: fileType, position: position, length: length,
    fieldName: fieldCode, sentence: sentence, value: value};
  }
  /qType: 'DB' operator: [YN] {
    return processor.handleBoolean({code: qType, op: operator});
  }

  /qType: 'DC' operator: [YN] {
    return processor.handleBoolean({code: qType, op:operator});
  }

  / qType: 'PR' operator: [YN] productCodes: (PR)+ {
    return processor.handleCollection({code: qType, op: operator, data: productCodes});
  }
  / qType: 'PI' operator:[YN] {
    return processor.handleBoolean({code: qType, op: operator});
  }
  / qType: 'RC' operator: [YN] m1: Member m2: Member m3: (Member)* {
    var desc = "region code of the " + m1 + " is the sam as " + m2;
        if(m3 !== undefined && m3 !== null && m3.length > 0) {
            desc += " and " + m3;
        }
    return {fieldCode: qType, desc: desc};
  }
  / qType: 'RE' operator: [YN] m: Member regions: (RE)+ {
    var op = (operator === 'Y')?"":"not";
    var detailedRegions = [],
        regionCount = regions.length;

    for(var i = 0;i<regionCount; i++) {
        var region = regions[i],
            domain = processor.regions[region.scheme][region.value];
        if(domain) {
            detailedRegions.push(domain);
            } else {
                console.log("!!!! RE prob " + region.value);
            }
    }
    return processor.handleFunction({code: qType, member:m, op: op, original: regions, data: detailedRegions});
  }
  /qType : 'RP' operator: [YN] values: ([A-Za-z])+ {
    return processor.handleCollection({code: qType, op: operator, data: values});
  }
  / qType: 'RT' operator: [YN] {
    return processor.handleBoolean({code: qType, op: operator});
  }
  / qType: 'TK' operator: [YN] amount: Numeric6 curr:Currency {
    var op = (operator === 'Y')?"not":"";
    return processor.handleFunction({code: qType, op: op, amount: amount, currency: curr});
  }
  / qType: 'DD' operator: [YN] days: Numeric2 dayIndicators: (DayIndicator)+ {
    var op = (operator === 'Y')?"including": "excluding";
    return processor.handleFunction({code: qType, days: days, op: op, data: dayIndicators});
  }
  / qType: 'EH' operator: [YN] {
    //this is MCC related field
    return processor.handleBoolean({code: qType, op: operator});
  }
  / qType: 'FL' operator: [YN] {
    return processor.handleCondition ({
        op: (operator === 'Y')?"is":"greater than",
        code: qType,
        value: 0
    });
  }
  / qType: 'HT' operator: [YN] {
    //this is MCC related field
    return processor.handleBoolean({code: qType, op: operator});
  }
  / qType: 'IT' operator: [YN] {
    // according to the documentation CP will be used instead
    console.log('not supported');
    return {fieldCode: qType, desc: "this field is not used according to the doc CP will be used instead"};
  }
  / qType: 'LV' operator: 'Y' param: [0-9] {
    return {fieldCode: qType, param: param, sentence: "Data Level (" + param +")"};
  }
  / qType: 'MC' operator: [YN] mccRanges: (MccRange)+ {
      return processor.handleRange({code: qType, op: operator, data: mccRanges});
  }
  / qType: 'MO' operator: [YN] {
    //this is MCC related field
    return processor.handleBoolean({code: qType, op:operator});
  }

AC
  = char: [ACEKMNPRVXUWS] {
    return char;
  }
BIN
  = seq: (Numeric3 Numeric3) {
    return seq.join("");
  }
AR
  = seq: (AnyNoSpace AnyNoSpace) {
    return seq.join("");
  }
Member
  = [IAM]
PR
  = seq: (CapsCharNumber CapsCharNumber CapsCharNumber) {  return seq.join("").trim(); }
  /seq: (CapsCharNumber space space) { return seq.join("").trim(); }
  /seq: (CapsCharNumber CapsCharNumber space) { return seq.join("").trim(); }
RE
  = char: [1ABCDE] { return {scheme: "MC", value: char};}
  / char: [1234567] {return {scheme: "VI", value: char};}

McCategoryCode
  = code: 'BIL' {return  getMasterCardCategoryCode(code);}
   / code: 'DOM' {return  getMasterCardCategoryCode(code);}
   / code: 'SUB' {return  getMasterCardCategoryCode(code);}
   / code: 'TER' {return  getMasterCardCategoryCode(code);}
   / code: 'TRA' {return  getMasterCardCategoryCode(code);}

ViCategoryCode
  = code: 'DMB' {return  getVisaCategoryCode(code);}
   / code: 'DMN' {return  getVisaCategoryCode(code);}
   / code: 'EXP' {return  getVisaCategoryCode(code);}
   / code: 'TER' {return  getVisaCategoryCode(code);}
   / code: 'TRA' {return  getVisaCategoryCode(code);}

SchemeType
  = code: 'C' {return {code: code, description: 'Cash'};}
   / code: 'F' {return {code: code, description: 'Funding'};}
   / code: 'P' {return {code: code, description: 'Purchase'};}

SchemeDescription
  = chars: ( Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc Desc ) {
    //36 symbols
    return chars.join("");
  }
DataAttribute40
  = chars: (SchemeDescription Desc Desc Desc Desc ) {
    //40 symbols
    return chars.join("").trim();
  }

ReimbursementAttribute
  = attribute: [A-Z0-9] {return attribute;}
    /space  { return undefined;}

InterchangeRateDesignator
  = rate: Char2 {return rate;}
  / space space {return undefined};
Desc
  = ch: . {
    return ch;
  }
  / '$'
DayIndicator
  = [TPSBNW]

ProcessingSequence
  = Numeric4

FeePercentage
  = val: Numeric4 {
    return parseFloat(val)/100;
  }

FlatFee
  = sign: [ +-] rate: Numeric7 {return {rate: rate, sign: sign, numeric: parseFloat(sign +rate)/10000 };}

FlatFeeCurrency
  = Currency
  / space space space {return undefined;}

MinimumFee
  = val: Numeric4 {
    return parseFloat(val)/1000;
  }

MaximumFee
  = val: Numeric6 {
    return parseFloat(val)/1000;
  }
InternationalIndicator
  = val: CharOrSpace {
    return val;
  }

PaymentServiceIndicator
  = CharOrSpace

ECIIndicator
  = CharOrSpace

FPIIndicator
  = seq: (AnyChar AnyChar AnyChar) {
    return seq.join("");
  }
MccRange
  = lowRange: Numeric4 topRange: Numeric4 {
    return {
        low: lowRange,
        top: topRange
    }
  }
FileType
  = 'C1'
    /'C2'
    /'C4'
    /'IT'
    /'LO'
    /'CR'
    /'PA'
    /'LI'
CardholderValidation
  = CapsChar
CharOrSpace
  = char: AnyChar {return char;}
   / space {return undefined;}

Numeric7
  = part1: Numeric4 part2: Numeric3 {
    return part1 + part2;
  }
Numeric6
   = seq: (Numeric3 Numeric3) {
      return seq.join("");
    }

Numeric4
  = seq1: [0-9] seq2:[0-9] seq3:[0-9] seq4:[0-9] {
        return seq1+seq2+seq3+seq4;
  }

Numeric3
  = seq: ([0-9] [0-9] [0-9]) {
    return seq.join("");
  }
Numeric2
  = seq1: [0-9] seq2:[0-9] {
    return seq1+seq2;
  }
Char4
  = ch1:[A-Za-z0-9 ] ch2:[A-Za-z0-9 ] ch3: [A-Za-z0-9 ] ch4: [A-Za-z0-9 ] {
    return ch1+ ch2 +ch3 +ch4;
  }

Char2
  = chars : (AnyNoSpace AnyNoSpace) {
        return chars.join("");
  }

CapsChar
  = [A-Z]
CapsCharNumber
  = [A-Z0-9]
AnyChar
  = [a-zA-Z 0-9'=]

AnyNoSpace
  = [a-zA-Z0-9'=]

Comment
  = marker: ('**') details: (!LineTerminator SourceCharacter)*{
    var comment = (details !== undefined)?details.join("").trim():"";
    console.log(comment);
    return marker + comment;
  }

LineTerminator
  = [\n\r\u2028\u2029]
LineTerminatorSequence "end of line"
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028" // line separator
  / "\u2029" // paragraph separator

SourceCharacter
  = .

Country
  = Currency
Currency
  = chars: (CapsChar CapsChar CapsChar) { return chars.join("");}
EndOfLine
  = ('\r\n')* ('\n')*

Characters
  = text: [>=/#\.\$\w\ 0-9A-Za-z:\-]
space
  = [ \t\n\r]
